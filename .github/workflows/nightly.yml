name: üåô Nightly Full Test Suite

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - api
          - ui
          - cross-browser

permissions:
  contents: read
  pages: write
  id-token: write

env:
  NODE_VERSION: '20.x'

jobs:
  # Job 1: API Tests (Fast feedback)
  api-tests:
    name: üîß API Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üß™ Run API tests
        run: npm run test:api
        env:
          CI: true

      - name: üìä Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: playwright-report/
          retention-days: 7

  # Job 2: Cross-browser testing (nightly only)
  cross-browser-tests:
    name: üåê Cross-Browser Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üé≠ Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }} --with-deps

      - name: üß™ Run UI tests on ${{ matrix.browser }}
        run: npx playwright test --project=ui-tests-${{ matrix.browser }}
        env:
          CI: true

      - name: üìä Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cross-browser-test-results-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 7

  # Job 3a: Generate API Test Report
  generate-api-report:
    name: üìä Generate API Report
    runs-on: ubuntu-latest
    needs: [api-tests]
    if: always()
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üì• Download API test results
        uses: actions/download-artifact@v4
        with:
          name: api-test-results
          path: ./all-test-results/api-test-results
        continue-on-error: true

      - name: üü¢ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üìä Organize API report
        run: |
          echo "üìÅ Organizing API report..."
          mkdir -p ./pages-deploy/nightly-reports/${{ github.run_number }}/api
          
          if [ -d "./all-test-results/api-test-results" ]; then
            echo "‚úÖ Found API test results"
            cp -r ./all-test-results/api-test-results/* ./pages-deploy/nightly-reports/${{ github.run_number }}/api/
            echo "‚úÖ API report organized successfully"
            ls -la ./pages-deploy/nightly-reports/${{ github.run_number }}/api/ | head -10
          else
            echo "‚ùå No API test results found"
          fi

      - name: üì§ Upload API Report (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: nightly-api-test-report
          path: ./pages-deploy/nightly-reports/${{ github.run_number }}/api/
          retention-days: 30

  # Job 3b: Generate Browser Test Report
  generate-browser-report:
    name: üåê Generate Browser Report
    runs-on: ubuntu-latest
    needs: [cross-browser-tests]
    if: always()
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üì• Download Chromium test results
        uses: actions/download-artifact@v4
        with:
          name: cross-browser-test-results-chromium
          path: ./all-test-results/cross-browser-test-results-chromium
        continue-on-error: true

      - name: üì• Download Firefox test results
        uses: actions/download-artifact@v4
        with:
          name: cross-browser-test-results-firefox
          path: ./all-test-results/cross-browser-test-results-firefox
        continue-on-error: true

      - name: üì• Download WebKit test results
        uses: actions/download-artifact@v4
        with:
          name: cross-browser-test-results-webkit
          path: ./all-test-results/cross-browser-test-results-webkit
        continue-on-error: true

      - name: üü¢ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üìä Organize browser report
        run: |
          echo "üìÅ Organizing browser report..."
          mkdir -p ./pages-deploy/nightly-reports/${{ github.run_number }}/browser
          
          BROWSER_COUNT=$(ls -d ./all-test-results/cross-browser-test-results-* 2>/dev/null | wc -l)
          echo "Found $BROWSER_COUNT browser test directories"
          
          if [ $BROWSER_COUNT -gt 0 ]; then
            echo "‚úÖ Found cross-browser test results - merging all browsers..."
            
            # Create merge command with all browser directories
            MERGE_DIRS=""
            for browser_dir in ./all-test-results/cross-browser-test-results-*/; do
              echo "  üìÇ Adding browser: $browser_dir"
              MERGE_DIRS="$MERGE_DIRS $browser_dir"
            done
            
            echo "üîÑ Running merge-reports..."
            npx playwright merge-reports --reporter html $MERGE_DIRS
            
            # Check if merge was successful
            if [ -d "blob-report" ]; then
              echo "‚úÖ Merge successful, copying merged report..."
              cp -r blob-report/* ./pages-deploy/nightly-reports/${{ github.run_number }}/browser/
              rm -rf blob-report
            else
              echo "‚ö†Ô∏è Merge may have failed, using first browser report as fallback..."
              cp -r ./all-test-results/cross-browser-test-results-chromium/* ./pages-deploy/nightly-reports/${{ github.run_number }}/browser/
            fi
            
            echo "‚úÖ Browser report organized successfully"
            ls -la ./pages-deploy/nightly-reports/${{ github.run_number }}/browser/ | head -10
          else
            echo "‚ö†Ô∏è No cross-browser test results found"
          fi

      - name: üì§ Upload Browser Report (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: nightly-browser-test-report
          path: ./pages-deploy/nightly-reports/${{ github.run_number }}/browser/
          retention-days: 30

  # Job 4: Notifications
  notify:
    name: üì¢ Notify Results
    runs-on: ubuntu-latest
    needs: [cross-browser-tests, generate-api-report, generate-browser-report]
    if: always()
    
    steps:
      - name: üì¢ Send Slack notification with report links
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: custom
          custom_payload: |
            {
              "text": "üé≠ Nightly Test Reports",
              "attachments": [{
                "color": "#FF9800",
                "fields": [{
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                }, {
                  "title": "Run",
                  "value": "#${{ github.run_number }}",
                  "short": true
                }, {
                  "title": "Commit",
                  "value": "`${{ github.sha }}`",
                  "short": true
                }],
                "actions": [{
                  "type": "button",
                  "text": "üîß API Test Report",
                  "url": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/nightly-reports/${{ github.run_number }}/api/"
                }, {
                  "type": "button",
                  "text": "üåê Browser Test Report",
                  "url": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/nightly-reports/${{ github.run_number }}/browser/"
                }, {
                  "type": "button",
                  "text": "üîç Workflow",
                  "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
