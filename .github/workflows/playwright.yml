name: 🎭 Playwright Test Suite

on:
  push:
    branches: [ "main", "develop" ]
  # Removed pull_request trigger to avoid duplication with pr-checks.yml
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - api
          - ui
          - smoke

permissions:
  contents: read
  pages: write
  id-token: write

env:
  NODE_VERSION: '20.x'

jobs:
  # Job 1: API Tests (Fast feedback)
  api-tests:
    name: 🔧 API Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run API tests
        run: npm run test:api
        env:
          CI: true

      - name: 📊 Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: playwright-report/
          retention-days: 7

  # Job 2: UI Tests (Parallel execution)
  ui-tests:
    name: 🖥️ UI Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: 🧪 Run UI tests
        run: npx playwright test --project=ui-tests-chromium
        env:
          CI: true

      - name: 📊 Upload UI test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-test-results
          path: playwright-report/
          retention-days: 7

  # Job 3a: Generate API Test Report
  generate-api-report:
    name: 📊 Generate API Report
    runs-on: ubuntu-latest
    needs: [api-tests]
    if: always()
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download API test results
        uses: actions/download-artifact@v4
        with:
          name: api-test-results
          path: ./all-test-results/api-test-results
        continue-on-error: true

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📊 Organize API report
        run: |
          echo "📁 Organizing API report..."
          mkdir -p ./pages-deploy/test-reports/${{ github.run_number }}/api
          
          if [ -d "./all-test-results/api-test-results" ]; then
            echo "✅ Found API test results"
            cp -r ./all-test-results/api-test-results/* ./pages-deploy/test-reports/${{ github.run_number }}/api/
            echo "✅ API report organized successfully"
            ls -la ./pages-deploy/test-reports/${{ github.run_number }}/api/ | head -10
          else
            echo "❌ No API test results found"
          fi

      - name: 📤 Upload API Report (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: api-test-report
          path: ./pages-deploy/test-reports/${{ github.run_number }}/api/
          retention-days: 30

  # Job 3b: Generate UI Test Report
  generate-ui-report:
    name: 🖥️ Generate UI Report
    runs-on: ubuntu-latest
    needs: [ui-tests]
    if: always()
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download UI test results
        uses: actions/download-artifact@v4
        with:
          name: ui-test-results
          path: ./all-test-results/ui-test-results
        continue-on-error: true

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📊 Organize UI report
        run: |
          echo "📁 Organizing UI report..."
          mkdir -p ./pages-deploy/test-reports/${{ github.run_number }}/ui
          
          if [ -d "./all-test-results/ui-test-results" ]; then
            echo "✅ Found UI test results"
            cp -r ./all-test-results/ui-test-results/* ./pages-deploy/test-reports/${{ github.run_number }}/ui/
            echo "✅ UI report organized successfully"
            ls -la ./pages-deploy/test-reports/${{ github.run_number }}/ui/ | head -10
          else
            echo "❌ No UI test results found"
          fi
      
      - name: 🌐 Setup GitHub Pages
        uses: actions/configure-pages@v4
        if: github.ref == 'refs/heads/main'
        continue-on-error: true

      - name: 📤 Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        if: github.ref == 'refs/heads/main'
        with:
          path: ./pages-deploy
        continue-on-error: true

      - name: 🚀 Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        if: github.ref == 'refs/heads/main'
        continue-on-error: true

  # Job 4: Notifications
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests, generate-api-report, generate-ui-report]
    if: always()
    
    steps:
      - name: 📢 Send Slack notification with report links
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: custom
          custom_payload: |
            {
              "text": "🎭 Playwright Test Reports",
              "attachments": [{
                "color": "#2196F3",
                "fields": [{
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                }, {
                  "title": "Branch",
                  "value": "${{ github.ref_name }}",
                  "short": true
                }, {
                  "title": "Run",
                  "value": "#${{ github.run_number }}",
                  "short": true
                }, {
                  "title": "Commit",
                  "value": "`${{ github.sha }}`",
                  "short": true
                }],
                "actions": [{
                  "type": "button",
                  "text": "🔧 API Test Report",
                  "url": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test-reports/${{ github.run_number }}/api/"
                }, {
                  "type": "button",
                  "text": "🖥️ UI Test Report",
                  "url": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test-reports/${{ github.run_number }}/ui/"
                }, {
                  "type": "button",
                  "text": "🔍 Workflow",
                  "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}