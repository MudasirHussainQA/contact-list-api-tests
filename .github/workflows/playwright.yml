name: 🎭 Playwright Test Suite

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - api
          - ui
          - smoke

env:
  NODE_VERSION: '20.x'

jobs:
  # Job 1: API Tests (Fast feedback)
  api-tests:
    name: 🔧 API Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run API tests
        run: npm run test:api
        env:
          CI: true

      - name: 📊 Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: test-results/
          retention-days: 7

  # Job 2: UI Tests (Parallel execution)
  ui-tests:
    name: 🖥️ UI Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3]
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: 🧪 Run UI tests (Shard ${{ matrix.shard }}/3)
        run: npx playwright test --project=ui-tests-chromium --shard=${{ matrix.shard }}/3
        env:
          CI: true

      - name: 📊 Upload UI test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-test-results-shard-${{ matrix.shard }}
          path: test-results/
          retention-days: 7

  # Job 3: Test Report Generation
  test-report:
    name: 📈 Generate Test Report
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests]
    if: always()
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📋 List available artifacts
        run: |
          echo "📊 Job status summary:"
          echo "API Tests: ${{ needs.api-tests.result }}"
          echo "UI Tests: ${{ needs.ui-tests.result }}"

      - name: 📥 Download all test results
        uses: actions/download-artifact@v4
        with:
          path: all-test-results
        continue-on-error: true

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📊 Merge test reports
        run: |
          echo "📁 Checking current directory:"
          pwd
          ls -la
          
          echo "📁 Checking if all-test-results exists:"
          if [ -d "./all-test-results" ]; then
            echo "✅ all-test-results directory found"
            ls -la ./all-test-results/
            find ./all-test-results -type f | head -20
            
            # Check if we have any test result files
            if find ./all-test-results -name "*.jsonl" -o -name "*.json" | grep -q .; then
              echo "✅ Test result files found, merging reports..."
              npx playwright merge-reports --reporter html ./all-test-results/
            else
              echo "⚠️ No test result files found, creating basic report..."
              mkdir -p playwright-report
              echo "<h1>No test results to merge</h1>" > playwright-report/index.html
            fi
          else
            echo "❌ all-test-results directory not found"
            echo "📁 Available directories:"
            ls -la
            
            # Create a basic report if no artifacts
            mkdir -p playwright-report
            echo "<h1>No test artifacts downloaded</h1>" > playwright-report/index.html
          fi

      - name: 📤 Upload merged report
        uses: actions/upload-artifact@v4
        with:
          name: merged-playwright-report
          path: playwright-report/
          retention-days: 30

      - name: 🌐 Deploy report to GitHub Pages
        id: deploy-pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./playwright-report
          destination_dir: test-reports/${{ github.run_number }}
        continue-on-error: true

      - name: 📋 Pages deployment status
        if: github.ref == 'refs/heads/main'
        run: |
          if [ "${{ steps.deploy-pages.outcome }}" == "success" ]; then
            echo "✅ GitHub Pages deployment successful!"
            echo "📊 Report available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test-reports/${{ github.run_number }}/"
          else
            echo "⚠️ GitHub Pages deployment failed or skipped"
            echo "💡 To enable GitHub Pages:"
            echo "   1. Go to repository Settings → Pages"
            echo "   2. Source: Deploy from a branch"
            echo "   3. Branch: gh-pages"
            echo "📊 Report still available as artifact: merged-playwright-report"
          fi

  # Job 4: Notifications & Metrics
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests, test-report]
    if: always()
    
    steps:
      - name: 📊 Calculate test results
        id: test-results
        run: |
          API_RESULT="${{ needs.api-tests.result }}"
          UI_RESULT="${{ needs.ui-tests.result }}"
          
          if [[ "$API_RESULT" == "success" && "$UI_RESULT" == "success" ]]; then
            echo "status=✅ All tests passed" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          elif [[ "$API_RESULT" == "failure" || "$UI_RESULT" == "failure" ]]; then
            echo "status=❌ Tests failed" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          else
            echo "status=⚠️ Tests cancelled or skipped" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
          fi

      - name: 📢 Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: custom
          custom_payload: |
            {
              "text": "${{ steps.test-results.outputs.status }}",
              "attachments": [{
                "color": "${{ steps.test-results.outputs.color }}",
                "fields": [{
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                }, {
                  "title": "Branch",
                  "value": "${{ github.ref_name }}",
                  "short": true
                }, {
                  "title": "Commit",
                  "value": "${{ github.sha }}",
                  "short": true
                }, {
                  "title": "Author",
                  "value": "${{ github.actor }}",
                  "short": true
                }, {
                  "title": "API Tests",
                  "value": "${{ needs.api-tests.result }}",
                  "short": true
                }, {
                  "title": "UI Tests", 
                  "value": "${{ needs.ui-tests.result }}",
                  "short": true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}