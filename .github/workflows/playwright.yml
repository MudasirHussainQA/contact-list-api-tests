name: 🎭 Playwright Test Suite

on:
  push:
    branches: [ "main", "develop" ]
  # Removed pull_request trigger to avoid duplication with pr-checks.yml
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - api
          - ui
          - smoke

permissions:
  contents: read
  pages: write
  id-token: write

env:
  NODE_VERSION: '20.x'

jobs:
  # Job 1: API Tests (Fast feedback)
  api-tests:
    name: 🔧 API Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run API tests
        run: npm run test:api
        env:
          CI: true

      - name: 📊 Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: test-results/
          retention-days: 7

  # Job 2: UI Tests (Parallel execution)
  ui-tests:
    name: 🖥️ UI Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3]
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: 🧪 Run UI tests (Shard ${{ matrix.shard }}/3)
        run: npx playwright test --project=ui-tests-chromium --shard=${{ matrix.shard }}/3
        env:
          CI: true

      - name: 📊 Upload UI test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-test-results-shard-${{ matrix.shard }}
          path: test-results/
          retention-days: 7

  # Job 3: Test Report Generation
  test-report:
    name: 📈 Generate Test Report
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests]
    if: always()
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📋 List available artifacts
        run: |
          echo "📊 Job status summary:"
          echo "API Tests: ${{ needs.api-tests.result }}"
          echo "UI Tests: ${{ needs.ui-tests.result }}"

      - name: 📥 Download all test results
        uses: actions/download-artifact@v4
        with:
          path: all-test-results
        continue-on-error: true

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📊 Merge test reports
        run: |
          echo "📁 Checking current directory:"
          pwd
          ls -la
          
          echo "📁 Checking if all-test-results exists:"
          if [ -d "./all-test-results" ]; then
            echo "✅ all-test-results directory found"
            ls -la ./all-test-results/
            find ./all-test-results -type f | head -20
            
            # Look for any test result directories with proper structure
            RESULT_DIRS=""
            for dir in ./all-test-results/*/; do
              if [ -d "$dir" ]; then
                echo "📂 Found artifact directory: $dir"
                ls -la "$dir"
                if [ -f "$dir/results.json" ] || find "$dir" -name "*.jsonl" -o -name "*.json" | grep -q .; then
                  RESULT_DIRS="$RESULT_DIRS $dir"
                fi
              fi
            done
            
            if [ ! -z "$RESULT_DIRS" ]; then
              echo "✅ Test result directories found: $RESULT_DIRS"
              echo "🔄 Merging reports..."
              npx playwright merge-reports --reporter html $RESULT_DIRS
            else
              echo "⚠️ No valid test result directories found"
              echo "🔍 Searching for any test files..."
              find ./all-test-results -name "*.json" -o -name "*.jsonl" -o -name "results.json" | head -10
              
              # Try to run tests to generate a basic report
              echo "🧪 Running a quick test to generate basic report structure..."
              npx playwright test --project=api-tests --grep="should" --reporter=html --max-failures=1 || true
              
              if [ ! -d "playwright-report" ]; then
                mkdir -p playwright-report
                echo '<!DOCTYPE html>' > playwright-report/index.html
                echo '<html><head><title>🎭 Playwright Test Results</title>' >> playwright-report/index.html
                echo '<style>body{font-family:Arial,sans-serif;margin:40px;text-align:center}' >> playwright-report/index.html
                echo '.header{background:#2196F3;color:white;padding:20px;border-radius:8px}' >> playwright-report/index.html
                echo '.status{margin:20px 0;padding:15px;background:#f5f5f5;border-radius:8px}</style>' >> playwright-report/index.html
                echo '</head><body><div class="header"><h1>🎭 Playwright Test Results</h1>' >> playwright-report/index.html
                echo "<p>$(date)</p></div><div class=\"status\"><h2>📊 Test Summary</h2>" >> playwright-report/index.html
                echo "<p><strong>API Tests:</strong> ${{ needs.api-tests.result }}</p>" >> playwright-report/index.html
                echo "<p><strong>UI Tests:</strong> ${{ needs.ui-tests.result }}</p>" >> playwright-report/index.html
                echo '<p><strong>Status:</strong> Report generation in progress</p></div>' >> playwright-report/index.html
                echo '<p><a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">🔍 View Workflow Details</a></p>' >> playwright-report/index.html
                echo '</body></html>' >> playwright-report/index.html
              fi
            fi
          else
            echo "❌ all-test-results directory not found"
            echo "📁 Available directories:"
            ls -la
            
            # Create a basic report if no artifacts
            mkdir -p playwright-report
            echo '<!DOCTYPE html>' > playwright-report/index.html
            echo '<html><head><title>🎭 Playwright Test Results - No Artifacts</title>' >> playwright-report/index.html
            echo '<style>body{font-family:Arial,sans-serif;margin:40px;text-align:center}' >> playwright-report/index.html
            echo '.header{background:#FF9800;color:white;padding:20px;border-radius:8px}' >> playwright-report/index.html
            echo '.status{margin:20px 0;padding:15px;background:#f5f5f5;border-radius:8px}</style>' >> playwright-report/index.html
            echo '</head><body><div class="header"><h1>🎭 Playwright Test Results</h1>' >> playwright-report/index.html
            echo "<p>$(date)</p></div><div class=\"status\"><h2>⚠️ No Test Artifacts Found</h2>" >> playwright-report/index.html
            echo "<p><strong>API Tests:</strong> ${{ needs.api-tests.result }}</p>" >> playwright-report/index.html
            echo "<p><strong>UI Tests:</strong> ${{ needs.ui-tests.result }}</p>" >> playwright-report/index.html
            echo '</div><p><a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">🔍 View Workflow Details</a></p>' >> playwright-report/index.html
            echo '</body></html>' >> playwright-report/index.html
          fi

      - name: 📤 Upload merged report
        uses: actions/upload-artifact@v4
        with:
          name: merged-playwright-report
          path: playwright-report/
          retention-days: 30

      - name: 🌐 Setup GitHub Pages
        uses: actions/configure-pages@v4
        if: github.ref == 'refs/heads/main'
        continue-on-error: true

      - name: 📁 Create report directory structure
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir -p ./pages-deploy/test-reports/${{ github.run_number }}
          cp -r ./playwright-report/* ./pages-deploy/test-reports/${{ github.run_number }}/
          
          # Create index.html that redirects to latest report
          cat > ./pages-deploy/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Test Reports</title>
            <meta http-equiv="refresh" content="0; url=./test-reports/${{ github.run_number }}/">
          </head>
          <body>
            <h1>Redirecting to latest test report...</h1>
            <p><a href="./test-reports/${{ github.run_number }}/">Click here if not redirected</a></p>
          </body>
          </html>
          EOF
          
          # List structure for debugging
          echo "📁 Directory structure created:"
          find ./pages-deploy -type f | head -10

      - name: 📤 Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        if: github.ref == 'refs/heads/main'
        with:
          path: ./pages-deploy
        continue-on-error: true

      - name: 🚀 Deploy to GitHub Pages
        id: deploy-pages
        uses: actions/deploy-pages@v4
        if: github.ref == 'refs/heads/main'
        continue-on-error: true

      - name: 📋 Pages deployment status
        if: github.ref == 'refs/heads/main'
        run: |
          if [ "${{ steps.deploy-pages.outcome }}" == "success" ]; then
            echo "✅ GitHub Pages deployment successful!"
            echo "📊 Report available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test-reports/${{ github.run_number }}/"
          else
            echo "⚠️ GitHub Pages deployment failed or skipped"
            echo "💡 To enable GitHub Pages:"
            echo "   1. Go to repository Settings → Pages"
            echo "   2. Source: Deploy from a branch"
            echo "   3. Branch: gh-pages"
            echo "📊 Report still available as artifact: merged-playwright-report"
          fi

  # Job 4: Notifications & Metrics
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests, test-report]
    if: always()
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download test report
        uses: actions/download-artifact@v4
        with:
          name: merged-playwright-report
          path: ./report-data
        continue-on-error: true

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📊 Extract test metrics from HTML report
        id: extract-metrics
        run: |
          # Create a Node.js script to parse HTML report
          cat > extract-metrics.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          function extractMetrics() {
            try {
              const reportPath = './report-data/index.html';
              if (!fs.existsSync(reportPath)) {
                console.log('No HTML report found, using job status metrics');
                return {
                  totalTests: 'N/A',
                  passed: 'N/A', 
                  failed: 'N/A',
                  skipped: 'N/A',
                  duration: 'N/A',
                  summary: 'Report not available'
                };
              }
              
              const htmlContent = fs.readFileSync(reportPath, 'utf8');
              console.log('HTML content preview:', htmlContent.substring(0, 500));
              
              // Multiple patterns to extract metrics from different report formats
              let totalTests = 'N/A', passed = 'N/A', failed = 'N/A', skipped = 'N/A', duration = 'N/A';
              
              // Pattern 1: Playwright HTML report - look for filter buttons and metadata
              const allMatch = htmlContent.match(/All\s+(\d+)/i);
              const passedMatch = htmlContent.match(/Passed\s+(\d+)/i) || 
                                 htmlContent.match(/✓\s*Passed\s+(\d+)/i) ||
                                 htmlContent.match(/(\d+)\s*passed/i);
              const failedMatch = htmlContent.match(/Failed\s+(\d+)/i) || 
                                 htmlContent.match(/✗\s*Failed\s+(\d+)/i) ||
                                 htmlContent.match(/(\d+)\s*failed/i);
              const flakyMatch = htmlContent.match(/Flaky\s+(\d+)/i);
              const skippedMatch = htmlContent.match(/Skipped\s+(\d+)/i) ||
                                  htmlContent.match(/(\d+)\s*skipped/i);
              
              // Look for total time pattern
              const durationMatch = htmlContent.match(/Total time:\s*(\d+(?:\.\d+)?[a-z]+)/i) ||
                                   htmlContent.match(/(\d+(?:\.\d+)?(?:ms|s|m))/i);
              
              // Extract values
              totalTests = allMatch ? allMatch[1] : 'N/A';
              passed = passedMatch ? passedMatch[1] : 'N/A';
              failed = failedMatch ? failedMatch[1] : 'N/A';
              skipped = skippedMatch ? skippedMatch[1] : 'N/A';
              duration = durationMatch ? durationMatch[1] : 'N/A';
              
              // Pattern 2: Custom HTML report (our fallback)
              if (!allMatch && htmlContent.includes('API Tests:') && htmlContent.includes('UI Tests:')) {
                // Extract from job status
                const apiSuccess = htmlContent.includes('API Tests:</strong> success');
                const uiSuccess = htmlContent.includes('UI Tests:</strong> success');
                
                if (apiSuccess && uiSuccess) {
                  passed = 'All';
                  failed = '0';
                  totalTests = 'Multiple';
                } else if (apiSuccess || uiSuccess) {
                  passed = 'Partial';
                  failed = 'Some';
                  totalTests = 'Multiple';
                } else {
                  passed = '0';
                  failed = 'All';
                  totalTests = 'Multiple';
                }
              }
              
              const summary = `${passed} passed, ${failed} failed`;
              
              const metrics = {
                totalTests,
                passed,
                failed,
                skipped,
                duration,
                summary
              };
              
              console.log('Extracted metrics:', metrics);
              return metrics;
            } catch (error) {
              console.error('Error extracting metrics:', error);
              return {
                totalTests: 'Error',
                passed: 'Error',
                failed: 'Error', 
                skipped: 'Error',
                duration: 'Error',
                summary: 'Failed to parse report'
              };
            }
          }
          
          const metrics = extractMetrics();
          console.log('METRICS_JSON=' + JSON.stringify(metrics));
          EOF
          
          # Run the extraction script
          node extract-metrics.js > metrics-output.txt
          METRICS_JSON=$(cat metrics-output.txt | grep "METRICS_JSON=" | cut -d'=' -f2-)
          echo "metrics=$METRICS_JSON" >> $GITHUB_OUTPUT
          
          # Parse and output individual metrics with error handling
          cat > parse-metrics.js << 'EOF'
          const metricsJson = process.argv[1];
          try {
            const metrics = JSON.parse(metricsJson);
            console.log('total_tests=' + (metrics.totalTests || 'N/A'));
            console.log('passed_tests=' + (metrics.passed || 'N/A'));
            console.log('failed_tests=' + (metrics.failed || 'N/A'));
            console.log('test_summary=' + (metrics.summary || 'N/A'));
            console.log('test_duration=' + (metrics.duration || 'N/A'));
          } catch (error) {
            console.log('total_tests=N/A');
            console.log('passed_tests=N/A');
            console.log('failed_tests=N/A');
            console.log('test_summary=Unable to parse metrics');
            console.log('test_duration=N/A');
          }
          EOF
          
          node parse-metrics.js "$METRICS_JSON" >> $GITHUB_OUTPUT

      - name: 📊 Calculate test results
        id: test-results
        run: |
          API_RESULT="${{ needs.api-tests.result }}"
          UI_RESULT="${{ needs.ui-tests.result }}"
          
          if [[ "$API_RESULT" == "success" && "$UI_RESULT" == "success" ]]; then
            echo "status=✅ All tests passed" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          elif [[ "$API_RESULT" == "failure" || "$UI_RESULT" == "failure" ]]; then
            echo "status=❌ Tests failed" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          else
            echo "status=⚠️ Tests cancelled or skipped" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
          fi

      - name: 📢 Enhanced Slack notification with test metrics
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: custom
          custom_payload: |
            {
              "text": "🎭 Playwright Test Results: ${{ steps.test-results.outputs.status }}",
              "attachments": [{
                "color": "${{ steps.test-results.outputs.color }}",
                "pretext": "📊 *Test Summary*: ${{ steps.extract-metrics.outputs.test_summary }}",
                "fields": [{
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                }, {
                  "title": "Branch",
                  "value": "${{ github.ref_name }}",
                  "short": true
                }, {
                  "title": "Total Tests",
                  "value": "${{ steps.extract-metrics.outputs.total_tests }}",
                  "short": true
                }, {
                  "title": "Duration",
                  "value": "${{ steps.extract-metrics.outputs.test_duration }}",
                  "short": true
                }, {
                  "title": "✅ Passed",
                  "value": "${{ steps.extract-metrics.outputs.passed_tests }}",
                  "short": true
                }, {
                  "title": "❌ Failed",
                  "value": "${{ steps.extract-metrics.outputs.failed_tests }}",
                  "short": true
                }, {
                  "title": "API Tests",
                  "value": "${{ needs.api-tests.result }}",
                  "short": true
                }, {
                  "title": "UI Tests", 
                  "value": "${{ needs.ui-tests.result }}",
                  "short": true
                }, {
                  "title": "Commit",
                  "value": "`${{ github.sha }}`",
                  "short": true
                }, {
                  "title": "Author",
                  "value": "${{ github.actor }}",
                  "short": true
                }],
                "actions": [{
                  "type": "button",
                  "text": "📊 View Full Report",
                  "url": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test-reports/${{ github.run_number }}/"
                }, {
                  "type": "button", 
                  "text": "🔍 View Workflow",
                  "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📎 Upload HTML report to Slack (on failures)
        if: always() && (needs.api-tests.result == 'failure' || needs.ui-tests.result == 'failure')
        run: |
          if [ -f "./report-data/index.html" ]; then
            echo "📎 Uploading HTML report to Slack for failed tests..."
            
            # Create a condensed summary report for Slack
            echo '<!DOCTYPE html><html><head><title>🎭 Playwright Test Summary</title>' > slack-summary.html
            echo '<style>body{font-family:Arial,sans-serif;margin:20px}.header{background:#f44336;color:white;padding:10px;border-radius:5px}' >> slack-summary.html
            echo '.success{color:#4CAF50}.failure{color:#f44336}.summary{background:#f5f5f5;padding:15px;border-radius:5px;margin:10px 0}' >> slack-summary.html
            echo '.metrics{display:flex;gap:20px}.metric{text-align:center;padding:10px;background:white;border-radius:5px}</style>' >> slack-summary.html
            echo '</head><body><div class="header"><h2>🎭 Playwright Test Results - FAILED</h2>' >> slack-summary.html
            echo "<p>Repository: ${{ github.repository }} | Branch: ${{ github.ref_name }}</p></div>" >> slack-summary.html
            echo '<div class="summary"><h3>📊 Test Summary</h3><div class="metrics">' >> slack-summary.html
            echo "<div class=\"metric\"><strong>${{ steps.extract-metrics.outputs.total_tests }}</strong><br>Total Tests</div>" >> slack-summary.html
            echo "<div class=\"metric\"><strong class=\"success\">${{ steps.extract-metrics.outputs.passed_tests }}</strong><br>Passed</div>" >> slack-summary.html
            echo "<div class=\"metric\"><strong class=\"failure\">${{ steps.extract-metrics.outputs.failed_tests }}</strong><br>Failed</div>" >> slack-summary.html
            echo "<div class=\"metric\"><strong>${{ steps.extract-metrics.outputs.test_duration }}</strong><br>Duration</div>" >> slack-summary.html
            echo '</div></div><div class="summary"><h3>🔧 Job Results</h3>' >> slack-summary.html
            echo "<p><strong>API Tests:</strong> ${{ needs.api-tests.result }}</p>" >> slack-summary.html
            echo "<p><strong>UI Tests:</strong> ${{ needs.ui-tests.result }}</p></div>" >> slack-summary.html
            echo "<p><a href=\"https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test-reports/${{ github.run_number }}/\">📊 View Full Interactive Report</a></p>" >> slack-summary.html
            echo "<p><a href=\"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\">🔍 View Workflow Details</a></p>" >> slack-summary.html
            echo '</body></html>' >> slack-summary.html
            
            # Use curl to upload file to Slack (requires SLACK_BOT_TOKEN)
            if [ ! -z "${{ secrets.SLACK_BOT_TOKEN }}" ]; then
              curl -F file=@slack-summary.html \
                   -F "initial_comment=🎭 Playwright Test Report Summary (Failures Detected)" \
                   -F channels=${{ secrets.SLACK_CHANNEL_ID || 'general' }} \
                   -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
                   https://slack.com/api/files.upload
            else
              echo "⚠️ SLACK_BOT_TOKEN not configured, skipping file upload"
              echo "💡 To enable file uploads, add SLACK_BOT_TOKEN to repository secrets"
            fi
          else
            echo "⚠️ No HTML report found to upload"
          fi